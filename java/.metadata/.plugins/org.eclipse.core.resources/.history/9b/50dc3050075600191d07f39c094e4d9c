package com.cytoscape.CytoscapeLiteratureNetwork.internal.object;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Specie {
	private static List<Species> allSpecies;
	private static Map<Integer, Species> taxIdSpecies;
	private int taxon_id;
	private String type;
	private String compactName;
	private String officialName;
	private String nodeColor;
	private List<String> interactionPartners;
	public Specie(String line) {
		if (line.startsWith("#"))
			return;
		String columns[] = line.trim().split("\t");
		if (columns.length < 4)
			//throw new IllegalArgumentException("Can't parse line: "+line + "\n" + columns.length);
		try {
			int tax = Integer.parseInt(columns[0]);
			List<String> intPartnersList = new ArrayList<String>();
			String nodeColor = "#92B4AF";
			if (columns.length == 6) {
				String[] intPartnersArray = columns[4].trim().split(",");
				for (String intPartner : intPartnersArray) {
					intPartnersList.add(intPartner.trim());
				}
				nodeColor = columns[5].trim();
			}
			init(tax, columns[1].trim(), columns[2].trim(), columns[3].trim(), nodeColor, intPartnersList);
		} catch (NumberFormatException nfe) {
			nfe.printStackTrace();
			init(0, columns[1].trim(), columns[2].trim(), columns[3].trim(), "#92B4AF",
					new ArrayList<String>());
		}
	}
	private void init(int tax, String type, String name, String oName, String nodeColor, List<String> intPartners) {
		this.taxon_id = tax;
		this.type = type;
		this.compactName = name;
		this.officialName = oName;
		this.nodeColor = nodeColor;
		this.interactionPartners = intPartners;
		// System.out.println("Created species: "+taxon_id+" "+type+" "+compactName+" "+officialName);
	}
	public static List<Specie> readSpecies() throws Exception {
		String speciesdir="/species_viruses_string11.txt";
		allSpecies = new ArrayList<Species>();
		taxIdSpecies = new HashMap<Integer, Species>();

		InputStream stream = null;
		try {
			java.net.URL resource = Species.class.getResource(speciesdir);	
			stream = resource.openConnection().getInputStream();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try (Scanner scanner = new Scanner(stream)) {
 
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				Species s = new Species(line);
				if (s != null && s.toString() != null && s.toString().length() > 0) {
					allSpecies.add(s);
					taxIdSpecies.put(new Integer(s.getTaxId()), s);
				}
			}
 
			scanner.close();
 
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return allSpecies;
	}
}
