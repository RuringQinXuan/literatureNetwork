package com.cytoscape.CytoscapeLiteratureNetwork.internal.object;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import javax.print.DocFlavor.URL;

public class Species {
	private static List<Species> allSpecies;
	private static Map<Integer, Species> taxIdSpecies;
	private int taxon_id;
	private String officialName;

	
	public Species(String line) {
		if (line.startsWith("#"))
			return;
		String columns[] = line.trim().split("\t");
		if (columns.length < 4)
			//throw new IllegalArgumentException("Can't parse line: "+line + "\n" + columns.length);
		try {
			int tax = Integer.parseInt(columns[0]);
			List<String> intPartnersList = new ArrayList<String>();
			String nodeColor = "#92B4AF";
			if (columns.length == 6) {
				String[] intPartnersArray = columns[4].trim().split(",");
				for (String intPartner : intPartnersArray) {
					intPartnersList.add(intPartner.trim());
				}
				nodeColor = columns[5].trim();
			}
			init(tax,  columns[3].trim());
		} catch (NumberFormatException nfe) {
			nfe.printStackTrace();
			init(0, columns[3].trim());
		}
	}


	public int getTaxId() { return taxon_id; }


	public String getOfficialName() { return officialName; }
	

	public static List<Species> getSpecies() {
		return allSpecies;
}



	public static String getSpeciesOfficialName(String taxId) {
		try {
			Integer intTaxId = Integer.valueOf(taxId);
			if (taxIdSpecies.containsKey(intTaxId)) {
				return taxIdSpecies.get(intTaxId).getOfficialName();
			}
		} catch (Exception e) {
			// ignore
		}		
		return "";
	}


	

	private void init(int tax, String oName) {
		this.taxon_id = tax;
		this.officialName = oName;
		
}
	public static List<Species> readSpecies() throws Exception {
		String speciesdir="/species_viruses_string11.txt";
		allSpecies = new ArrayList<Species>();
		taxIdSpecies = new HashMap<Integer, Species>();

		InputStream stream = null;
		try {
			java.net.URL resource = Species.class.getResource(speciesdir);	
			stream = resource.openConnection().getInputStream();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try (Scanner scanner = new Scanner(stream)) {
 
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				
				Species s = new Species(line);
				if (s != null && s.toString() != null && s.toString().length() > 0) {
					allSpecies.add(s);
					taxIdSpecies.put(new Integer(s.getTaxId()), s);
				}
			}
			scanner.close();
 
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		System.out.println(allSpecies);
		return allSpecies;
}
}
