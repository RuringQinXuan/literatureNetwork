package com.cytoscape.CytoscapeLiteratureNetwork.internal.ui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;

import java.util.ArrayList;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.cytoscape.model.CyNetwork;

public class ProteinNumberPanel extends JPanel{
	
	String initialEntityNumber="100";
	String EntityNumber;
	JTextField jtf_protein_number;
	int additionalNodes;
	private boolean ignore = false;
	JTextField additionalNodesValue;
	NumberFormat intFormatter = new DecimalFormat("#0");
	NumberFormat formatter = new DecimalFormat("#0.00");
	JSlider additionalNodesSlider;
	public ProteinNumberPanel(){
		
		JLabel jl_protein_number = new JLabel("Maxinum number of proteins: ");
		
		final JSlider jslid_protein_number = new JSlider(0, 100, 40);
		jslid_protein_number.setMinorTickSpacing(1);	
		jslid_protein_number.setMajorTickSpacing(10);		
		jslid_protein_number.setPaintTicks(true);
		
		EasyGBC c = new EasyGBC();
		JPanel additionalNodesSlider = createAdditionalNodesSlider();
		jtf_protein_number = new JTextField(2);
		jtf_protein_number.setText(initialEntityNumber);
		
		this.EntityNumber=jtf_protein_number.getText();
		
		this.setLayout(new BorderLayout(5,5));
		this.add(jl_protein_number,BorderLayout.WEST);
        this.add(jslid_protein_number,BorderLayout.CENTER);
        this.add(jtf_protein_number,BorderLayout.EAST);
        this.setBorder(BorderFactory.createEtchedBorder()); 
	}
	public String Get_entity_number(){
		
		return EntityNumber;
	}
	public String getEntityNumber() {
		return EntityNumber;
	}
	
	JPanel createAdditionalNodesSlider() {
		JPanel additionalNodesPanel = new JPanel();
		additionalNodesPanel.setLayout(new GridBagLayout());
		additionalNodesPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
		EasyGBC c = new EasyGBC();

		Font labelFont;
		{
			c.anchor("west").noExpand().insets(0,5,0,5);
			JLabel additionalNodesLabel;
			additionalNodesLabel = new JLabel("Maximum number of proteins:");
			labelFont = additionalNodesLabel.getFont();
			additionalNodesLabel.setFont(new Font(labelFont.getFontName(), Font.BOLD, labelFont.getSize()));
			additionalNodesPanel.add(additionalNodesLabel, c);
		}	
		
		{
			int	maxValue = 2000;
			int minValue = 1;
			JSlider additionalNodesSlider = new JSlider(minValue, maxValue, additionalNodes);
			Dictionary<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();
			Font valueFont = new Font(labelFont.getFontName(), Font.BOLD, labelFont.getSize()-4);
			for (int value = 0; value <= maxValue; value += maxValue/10) {
				if (value == 0 && minValue == 1) {
					JLabel label = new JLabel(Integer.toString(1));
					label.setFont(valueFont);
					labels.put(value, label);
				} else {
					JLabel label = new JLabel(Integer.toString(value));
					label.setFont(valueFont);
					labels.put(value, label);
				}
			}
			additionalNodesSlider.setLabelTable(labels);
			additionalNodesSlider.setPaintLabels(true);
			additionalNodesSlider.setValue(additionalNodes);

			additionalNodesSlider.addChangeListener(new ChangeListener() {
				@Override
				public void stateChanged(ChangeEvent e) {
					if (ignore) return;
					ignore = true;
					int value = additionalNodesSlider.getValue();
					additionalNodesValue.setText(Integer.toString(value));
					ignore = false;
				}
			});
			// c.anchor("southwest").expandHoriz().insets(0,5,0,5);
			c.right().expandHoriz().insets(0,5,0,5);
			additionalNodesPanel.add(additionalNodesSlider, c);
		}

		{
			additionalNodesValue = new JTextField(4);
			additionalNodesValue.setHorizontalAlignment(JTextField.RIGHT);
			additionalNodesValue.setText(""+additionalNodes);
			c.right().noExpand().insets(0,5,0,5);
			additionalNodesPanel.add(additionalNodesValue, c);

			additionalNodesValue.addActionListener(new AbstractAction() {
				@Override
				public void actionPerformed(ActionEvent e) {
					addNodesFieldValueChanged();
				}
			});

			additionalNodesValue.addFocusListener(new FocusAdapter() {
				@Override
				public void focusLost(FocusEvent e) {
					addNodesFieldValueChanged();
				}
			});

		}
 return additionalNodesPanel;
	}
	
	private void addNodesFieldValueChanged() {
		if (ignore) return;
		ignore = true;
		String text = additionalNodesValue.getText();
		Number n = intFormatter.parse(text, new ParsePosition(0));
		int val = 0;
		if (n == null) {
			try {
				val = Integer.valueOf(additionalNodesValue.getText());
			} catch (NumberFormatException nfe) {
				val = addNodesInputError(100);
			}
		} else if (n.intValue() < 0) {
			val = addNodesInputError(100);
		} else if (n.intValue() > 2000 ) {
			val = addNodesInputError(2000);
		} else {
			val = n.intValue();
		}
		val = val;
		additionalNodesSlider.setValue(val);
		ignore = false;
}
	public int getAdditionalNodes() {
		return additionalNodesSlider.getValue();
	}

	public void setAdditionalNodes(int additionalNodes) {
		additionalNodesSlider.setValue(additionalNodes);
	}

	public void enableAdditionalNodes(boolean enable) {
		if (!enable) {
			additionalNodesSlider.setValue(0);
			additionalNodesValue.setText("0");
		}
		additionalNodesSlider.setEnabled(enable);
		additionalNodesValue.setEnabled(enable);
	}

	private int addNodesInputError(int maxAddNodes) {
		additionalNodesValue.setBackground(Color.RED);
		JOptionPane.showMessageDialog(null, 
				                          "Please enter a number of additional nodes between 0 and " + maxAddNodes, 
											            "Alert", JOptionPane.ERROR_MESSAGE);
		additionalNodesValue.setBackground(UIManager.getColor("TextField.background"));

		// Reset the value to correspond to the current slider setting
		int val = additionalNodesSlider.getValue();
		additionalNodesValue.setText(Integer.toString(val));
		return val;
}

		
}
