package com.cytoscape.CytoscapeLiteratureNetwork.internal.task;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanel;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelComponent2;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.application.swing.CytoPanelState;
import org.cytoscape.model.CyEdge;
import org.cytoscape.model.CyNetwork;
import org.cytoscape.model.CyNetworkFactory;
import org.cytoscape.model.CyNetworkManager;
import org.cytoscape.model.CyNode;
import org.cytoscape.model.CyTable;
import org.cytoscape.model.CyTableFactory;
import org.cytoscape.model.CyTableManager;
import org.cytoscape.model.events.RowsSetListener;
import org.cytoscape.service.util.CyServiceRegistrar;
import org.cytoscape.session.CyNetworkNaming;
import org.cytoscape.work.AbstractTask;
import org.cytoscape.work.TaskMonitor;
import org.json.simple.JSONObject;

import com.cytoscape.CytoscapeLiteratureNetwork.internal.view.LiteratureNetworkCytoPanel;

public class ShowNetworkTask extends AbstractTask {
	
	private CyServiceRegistrar serviceRegistrar;

	private final CyNetworkManager netMgr;
	private final CyNetworkFactory cnf;
	private final CyNetworkNaming namingUtil; 
	private JSONObject result;
	
	public ShowNetworkTask(CyServiceRegistrar serviceRegistrar, final CyNetworkManager netMgr, final CyNetworkNaming namingUtil, final CyNetworkFactory cnf,JSONObject result){
		this.serviceRegistrar = serviceRegistrar;
		
		this.netMgr = netMgr;
		this.cnf = cnf;
		this.namingUtil = namingUtil;
		this.result=result;
		
	}
	public void run(final TaskMonitor monitor) {
		// Create an empty network
		final CyNetwork myNet = cnf.createNetwork();
		myNet.getRow(myNet).set(CyNetwork.NAME,
				      namingUtil.getSuggestedNetworkTitle("My Network"));
		
		Map<String, CyNode> networkNodes = new HashMap<String, CyNode>();
		
		Map<String,JSONObject>nodes = (Map<String, JSONObject>) result.get("nodes");
		ArrayList<JSONObject> edges = (ArrayList<JSONObject>) result.get("edges");
		Map<String,String> sentences_dic = (Map<String, String>) result.get("sentences");
		
		CyTableFactory ctf=serviceRegistrar.getService(CyTableFactory.class);
		CyTableManager ctm=serviceRegistrar.getService(CyTableManager.class);
		ctm.addTable(ctf.createTable("PubmedMetaData", "pmid", String.class, true, false)); //TODO : change public to false
		CyTable tb_pmmd = ctm.getTable(0);
		System.out.println(tb_pmmd.getSUID());
		tb_pmmd.createColumn("pmid", String.class, false);
		tb_pmmd.createColumn("title", String.class, false);
		tb_pmmd.createColumn("publicdate", String.class, false);
		tb_pmmd.createColumn("journal", String.class, false);
		tb_pmmd.createColumn("authors", String.class, false);
		
		myNet.getDefaultNodeTable().createColumn("type_id", String.class, false);
		myNet.getDefaultNodeTable().createColumn("id", String.class, false);
		
		
		myNet.getDefaultEdgeTable().createListColumn("sentence_text", String.class, false);
		myNet.getDefaultEdgeTable().createListColumn("sentence_id", String.class, false);
		myNet.getDefaultEdgeTable().createListColumn("sentenceInformation", String.class, false);
		myNet.getDefaultEdgeTable().createColumn("sentence_number", Integer.class, false);
		
		// set name for new nodes
		for (Entry<String, JSONObject> entry :nodes.entrySet()) {
			final CyNode node1 = myNet.addNode();
			myNet.getDefaultNodeTable().getRow(node1.getSUID()).set("name", entry.getValue().get("name"));
			myNet.getDefaultNodeTable().getRow(node1.getSUID()).set("id", entry.getValue().get("id"));
			myNet.getDefaultNodeTable().getRow(node1.getSUID()).set("type_id", entry.getValue().get("type_id"));
			
			networkNodes.put((String)entry.getValue().get("type_id"), node1);
		}
		
		//set edges
		for(JSONObject edge:edges){
			final CyNode node1 = networkNodes.get(edge.get("source"));
			final CyNode node2 = networkNodes.get(edge.get("target"));
			ArrayList<JSONObject> sentenceList = (ArrayList<JSONObject>) edge.get("sentences");
			if(node1 == null || node2 == null) {
				System.out.println(edge.get("source") + " or " + edge.get("target") + " is not a node.");
				continue;
			}
			
			final CyEdge edge1 = myNet.addEdge(node1, node2, true);
			// set name for new edges
			
			
			List<String> sentence_content = new ArrayList<String>();
			List<String> sentence_ID = new ArrayList<String>();
			List<String> sentenceInformation = new ArrayList<String>();
			
			for (int i = 0; i < sentenceList.size(); i++) {
				JSONObject senten=sentenceList.get(i);
				sentence_ID.add((String) senten.get("sentenceID"));
				sentence_content.add(sentences_dic.get(senten.get("sentenceID")));		
				sentenceInformation.add((String) senten.toJSONString());
			}
			myNet.getDefaultEdgeTable().getRow(edge1.getSUID()).set("sentence_id", sentence_ID);
			myNet.getDefaultEdgeTable().getRow(edge1.getSUID()).set("sentenceInformation", sentenceInformation);
			myNet.getDefaultEdgeTable().getRow(edge1.getSUID()).set("sentence_text", sentence_content);
			myNet.getDefaultEdgeTable().getRow(edge1.getSUID()).set("sentence_number",sentence_ID.size());
		}
		
		netMgr.addNetwork(myNet);
		
		// We register the Panel
		CySwingApplication swingApplication = this.serviceRegistrar.getService(CySwingApplication.class);
		CytoPanel cytoPanel = swingApplication.getCytoPanel(CytoPanelName.EAST);

		// If the panel is not already registered, create it
		if (cytoPanel.indexOfComponent(LiteratureNetworkCytoPanel.IDENTIFIER) < 0) {
			CytoPanelComponent2 panel = new LiteratureNetworkCytoPanel(serviceRegistrar);

			// Register it
			serviceRegistrar.registerService(panel, CytoPanelComponent.class, new Properties());
			serviceRegistrar.registerService(panel, RowsSetListener.class, new Properties());

			if (cytoPanel.getState() == CytoPanelState.HIDE)
				cytoPanel.setState(CytoPanelState.DOCK);
		}
	}
}
