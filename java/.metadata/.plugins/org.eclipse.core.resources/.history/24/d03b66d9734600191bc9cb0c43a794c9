package com.cytoscape.CytoscapeLiteratureNetwork.internal.task;

import com.cytoscape.CytoscapeLiteratureNetwork.internal.io.HttpUtils;
import com.cytoscape.CytoscapeLiteratureNetwork.internal.object.PubmedEntity;
import com.cytoscape.CytoscapeLiteratureNetwork.internal.object.PubmedMetadata;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.swing.text.html.HTMLDocument.Iterator;

import org.cytoscape.work.AbstractTask;
import org.cytoscape.work.ObservableTask;
import org.cytoscape.work.TaskMonitor;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class SearchEntityTask extends AbstractTask implements ObservableTask {
	private List<String> ids;
	private List<PubmedEntity> pmet;
	final int limit=100;
	private String type2;
	public SearchEntityTask(List<String> ids){
		this.ids=ids;
		//this.limit = limit;
		// TODOï¼š Test
		this.pmet=new ArrayList<>();
	}
	@Override
	public void run(TaskMonitor monitor) throws Exception {
		// TODO Auto-generated method stub
		type2="9906";
		monitor.showMessage(TaskMonitor.Level.INFO,"Pubmed returned "+ids.size()+" results, of which we downloaded "+ids.size());
		
		Map<String, String> args = new HashMap<>();
		StringBuilder sb = new StringBuilder();
		for (Object id: ids) {
			sb.append(id.toString()+" ");
		}
		args.put("documents", sb.toString());
		args.put("format", "json");
		args.put("limit", Integer.toString(limit));
		args.put("type2", type2);
		monitor.setTitle("Querying STRING");
		monitor.setStatusMessage("Querying PubMed Entities");
		JSONObject object = HttpUtils.postJSON("https://api11.jensenlab.org/Textmining",
				args);
		JSONArray result = (JSONArray) object.get("result");
		Map<String, Map> maps = (Map<String, Map>) result.get(0);
		 
		for(Object id : maps.keySet()) {
			pmet.add(new PubmedEntity(id,maps.get(id).get("name"),type2));
		}
	}
	@Override
	public <R> R getResults(Class<? extends R> arg0) {
		// TODO Auto-generated method stub
		return (R) pmet;
	}
}
//		JSONObject result = (JSONObject) object.get("result");
//		if (result == null) {
//			monitor.showMessage(TaskMonitor.Level.ERROR,"String returned no results");
//			// System.out.println("object wrong type: "+object.toString());
//			return;
//		}
//		JSONObject json = (JSONObject)result.get("esearchresult");
//		if (json == null) {
//			monitor.showMessage(TaskMonitor.Level.ERROR,"Pubmed returned no results");
//			// System.out.println("object doesn't contain esearchresult: "+object.toString());
//			return;
//		}
//
//		// Get the total number of results
//		int count = Integer.parseInt((String)json.get("count"));
//		if (count == 0) {
//			monitor.showMessage(TaskMonitor.Level.ERROR,"Pubmed returned no results");
//			// System.out.println("object doesn't contain count: "+json.toString());
//			return;
//		}
//
//		JSONArray json_ids = (JSONArray)json.get("idlist");
//		ids = new ArrayList<>();
//		for(Object id : json_ids) {
//			ids.add(id.toString());
//		}


