package com.cytoscape.CytoscapeLiteratureNetwork.internal.ui;

import java.awt.BorderLayout;
import java.awt.GridBagLayout;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;

public class ProteinNumberPanel extends JPanel{
	
	String initialEntityNumber="100";
	String EntityNumber;
	JTextField jtf_protein_number;
	
	public ProteinNumberPanel(){
		
		JLabel jl_protein_number = new JLabel("Maxinum number of proteins: ");
		
		final JSlider jslid_protein_number = new JSlider(0, 100, 40);
		jslid_protein_number.setMinorTickSpacing(1);	
		jslid_protein_number.setMajorTickSpacing(10);		
		jslid_protein_number.setPaintTicks(true);
		
		
		
		jtf_protein_number = new JTextField(2);
		jtf_protein_number.setText(initialEntityNumber);
		
		this.EntityNumber=jtf_protein_number.getText();
		
		this.setLayout(new BorderLayout(5,5));
		this.add(jl_protein_number,BorderLayout.WEST);
        this.add(jslid_protein_number,BorderLayout.CENTER);
        this.add(jtf_protein_number,BorderLayout.EAST);
        this.setBorder(BorderFactory.createEtchedBorder()); 
	}
	public String Get_entity_number(){
		
		return EntityNumber;
	}
	public String getEntityNumber() {
		return EntityNumber;
	}
	JPanel createAdditionalNodesSlider() {
		JPanel additionalNodesPanel = new JPanel();
		additionalNodesPanel.setLayout(new GridBagLayout());
		additionalNodesPanel.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
		EasyGBC c = new EasyGBC();

		Font labelFont;
		{
			c.anchor("west").noExpand().insets(0,5,0,5);
			JLabel additionalNodesLabel;
			if (isDisease || isPubMed)
				additionalNodesLabel = new JLabel("Maximum number of proteins:");
			else
				additionalNodesLabel = new JLabel("Maximum additional interactors:");

			labelFont = additionalNodesLabel.getFont();
			additionalNodesLabel.setFont(new Font(labelFont.getFontName(), Font.BOLD, labelFont.getSize()));
			additionalNodesPanel.add(additionalNodesLabel, c);
		}

		{
			int maxValue = 100;
			int minValue = 0;
			if (isDisease || isPubMed) {
				maxValue = 2000;
				minValue = 1;
			}
			additionalNodesSlider = new JSlider(minValue, maxValue, additionalNodes);
			Dictionary<Integer, JLabel> labels = new Hashtable<Integer, JLabel>();
			Font valueFont = new Font(labelFont.getFontName(), Font.BOLD, labelFont.getSize()-4);
			for (int value = 0; value <= maxValue; value += maxValue/10) {
				if (value == 0 && minValue == 1) {
					JLabel label = new JLabel(Integer.toString(1));
					label.setFont(valueFont);
					labels.put(value, label);
				} else {
					JLabel label = new JLabel(Integer.toString(value));
					label.setFont(valueFont);
					labels.put(value, label);
				}
			}
			additionalNodesSlider.setLabelTable(labels);
			additionalNodesSlider.setPaintLabels(true);
			additionalNodesSlider.setValue(additionalNodes);

			additionalNodesSlider.addChangeListener(new ChangeListener() {
				@Override
				public void stateChanged(ChangeEvent e) {
					if (ignore) return;
					ignore = true;
					int value = additionalNodesSlider.getValue();
					additionalNodesValue.setText(Integer.toString(value));
					ignore = false;
				}
			});
			// c.anchor("southwest").expandHoriz().insets(0,5,0,5);
			c.right().expandHoriz().insets(0,5,0,5);
			additionalNodesPanel.add(additionalNodesSlider, c);
		}

		{
			additionalNodesValue = new JTextField(4);
			additionalNodesValue.setHorizontalAlignment(JTextField.RIGHT);
			additionalNodesValue.setText(""+additionalNodes);
			c.right().noExpand().insets(0,5,0,5);
			additionalNodesPanel.add(additionalNodesValue, c);

			additionalNodesValue.addActionListener(new AbstractAction() {
				@Override
				public void actionPerformed(ActionEvent e) {
					addNodesFieldValueChanged();
				}
			});

			additionalNodesValue.addFocusListener(new FocusAdapter() {
				@Override
				public void focusLost(FocusEvent e) {
					addNodesFieldValueChanged();
				}
			});

		}
 return additionalNodesPanel;
}
